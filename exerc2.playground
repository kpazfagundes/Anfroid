enum BankOperation {
    case withdrawl(value: Double)
    case deposit(from: String, value: Double)
}

protocol BankAccountProtocol {
    init(number: String, holder: String)
    
    var balance: Double { get }
    var statement: [BankOperation] { get }
    
    func withdrawl(value: Double) throws
    func deposit(value: Double, from account: String)
    func formattedStatement() -> String
}

enum BankAccountError: Error {
    case insuficientFounds(currentBalance: Double)
}

class Mybank: BankAccountProtocol {
    private let number: String
    private let holder: String
    private(set) var balance: Double
    private(set) var statement: [BankOperation]
    
    required init(number: String, holder: String) {
        self.number = number
        self.holder = holder
        self.balance = 0.0
        self.statement = []
    }
    
    func withdrawl(value: Double) throws {
        if self.balance < value {
            throw BankAccountError.insuficientFounds(currentBalance: self.balance)
        } else {
            self.statement.append(BankOperation.withdrawl(value: value))
            self.balance -= value
        }
    }
    
    func deposit(value: Double, from account: String) {
        self.statement.append(BankOperation.deposit(from: account, value: value))
        self.balance += value
    }
    
    func formattedStatement() -> String {
        var result = "OPERATION    VALUE    FROM\n"
        
        for item in self.statement {
            switch item {
            case let BankOperation.deposit(from, value):
                result += "DEP          \(value)    \(from)\n"
            case let BankOperation.withdrawl(value):
                result += "WTD          \(value)\n"
            }
            
        }
        return result;
    }
}

var bank = Mybank(number: "ka1903", holder: "kar")

bank.deposit(value: 90, from: "1234567")
bank.deposit(value: 120, from: "1234567")
bank.deposit(value: 15, from: "1234567")

do {
    try bank.withdrawl(value: 263)
    try bank.withdrawl(value: 40)
} catch BankAccountError.insuficientFounds(let currentBalance){
    print("Insuficient founds. CurrentBalance: \(currentBalance)")
}
bank.deposit(value: 200, from: "1234567")
do {
    try bank.withdrawl(value: 20)
} catch BankAccountError.insuficientFounds(let currentBalance){
    print("Insuficient founds. CurrentBalance: \(currentBalance)")
}
print(bank.formattedStatement())